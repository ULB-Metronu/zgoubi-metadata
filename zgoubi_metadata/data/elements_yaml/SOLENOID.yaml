zgoubi_name: SOLENOID
params:
  IL: {type: I, unit: "", default: 0, doc: ""}
  XL: {type: E, unit: "cm", default: 0, doc: "Length of the element"}
  R0: {type: E, unit: "cm", default: 1, doc: "Radius of the element"}
  B0: {type: E, unit: "kilogauss", default: 0, doc: "Asymptotic field"}
  MODL: {type: I, unit: "", default: 1, doc: "r-extrapolation from on-axis field model"}
  X_E: {type: E, unit: "cm", default: 0, doc: "Entrance integration zone"}
  X_S: {type: E, unit: "cm", default: 0, doc: "Exit integration zone"}
  XPAS: {type: E, unit: 'mm', default: 1, doc: "Integration step"}
  KPOS: {type: I, unit: "", default: 0, doc: ""}
  XCE: {type: E, unit: "", default: 0, doc: ""}
  YCE: {type: E, unit: "", default: 0, doc: ""}
  ALE: {type: E, unit: "", default: 0, doc: ""}
template:
- - IL
- - XL
  - R0
  - [B0, MODL]
- - X_E
  - X_S
- - XPAS
- - KPOS
  - XCE
  - YCE
  - ALE

doc: |
  Solenoid

  .. rubric:: Zgoubi manual description

  The solenoidal magnet has an effective length XL, a mean radius R0 and an asymptotic field :math:`B_0 = \mu_0 N I /XL`
  (i.e., assuming :math:`R_0` << L, \int_{-\infty}^{\infty} B_X(X,r) dX = \mu_0 N I , \forall r < R_0 ), wherein NI = number of ampere-Turns,
  :math:`\mu_0 = 4\pi 10-7`. The distance of ray-tracing beyond the effective length XL, is XE at the entrance,
  and XS at the exit (Fig. 38).
  Two methods are available for the computation of the field :math:`\vec{B}(X, Y, Z)` and its derivatives.

  **Method 1**

  This is the classical on-axis field model [9]

  .. math::

    B_X(X, r=0) = \frac{B_0}{2} \left[ \frac{XL /2 - X}{\sqrt{(XL /2 - X)^2 + R_0^2}} + \frac{XL /2 + X}{\sqrt{(XL /2 + X)^2 + R_0^2}} \right]

  with X = r = 0 taken at the center of the solenoid. This model assumes that the coil thickness is small
  compared to its mean radius R0. In this model, the magnetic length is

  .. math::

    L_{mag} \equiv \frac{\int_{-\infty}^{\infty} B_X(X,r < R_0) dX}{B_X(X = r = 0)} = XL \sqrt{ 1 + \frac{4R_0^2}{XL^2}} > XL

  with in addition

  .. math::

    B_X(center) \equiv B_X(X = r = 0) = \frac{\mu_0 N I}{XL \sqrt{ 1 + \frac{4R_0^2}{XL^2}}} \xrightarrow{R_0 << XL} \frac{\mu_0 N I}{ XL}

  From eq. 6.3.27, the field and its derivatives at all (X, Y,Z) are extrapolated (the model validity limit is r < R0),
  following the method described in section 1.3.1.

  **Method 2**

  The computation of the radial, :math:`B_r(X, r)`, and axial :math:`B_X(X, r)` components of the field vector :math:`\vec{B}(X, r)`
  (with  :math:`r = (Y^2 + Z^2)^{1/2}`) follows the technique in Ref. [61], namely, constructing :math:`B_r(X, r)`, and :math:`B_X(X, r)` from
  respectively

  .. math::

  \begin{align}
    b_X(X, r) &= \frac{\mu_0 N I}{4\pi}\frac{ck}{r} \chi \left[ K + \frac{r_0 - r}{2r_0} (\Pi - K)\right] \\
    b_r(X, r) &= \mu_0 N I\frac{1}{k} \sqrt{\frac{r_0}{r}} \left[ 2(K - E) -k^2 K)\right] \\
  \end{align}

  wherein K, E and :math:`\Pi` are the three complete elliptic integrals, :math:`\chi` is an X- and XL-dependent quantity, and

  .. math::

    k = 2 \sqrt{r_0 r} / \sqrt{(r_0 +  r)^2 + \chi ^2}; c = 2 \sqrt{r_0 r} / (r_0 + r)

  K, E and :math:`\Pi` are computed using fast converging algorithms proposed in the same reference. Their derivatives
  are obtained from recursive relations [62], as needed to derive the field derivatives at all (X, Y,Z) (up to second order installed in the code).
